using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;
using Harmony;

namespace TLD_Bugfixes {

	/*
	 * The cooking skill can be exploited by creating many small pieces of meat and cooking them individually.
	 * Each of these cooking actions yields one skill point, just as if the player cooked a full 1kg piece of meat.
	 * Using this exploit, a player can advance the cooking skill from level 1 to level 5 with just one or two
	 * deer carcasses.
	 *
	 * Ideally, you'd fix this by checking the weight of the item in CookingPotItem#PickUpCookedGearItem(bool)
	 * before awarding the skill point by calling GameManager.GetSkillsManager().IncrementPointsAndNotify().
	 * As I'm limited to editing a list of IL instructions, my fix is a bit uglier than that.
	 *
	 * I've also disabled gaining skill points for cooking ruined items.
	 */

	[HarmonyPatch(typeof(CookingPotItem), "PickUpCookedGearItem")]
	internal static class ExploitableCookingSkillFix {

		private const float MIN_SIZE = 0.6f;

		private static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions) {
			List<CodeInstruction> result = new List<CodeInstruction>();

			MethodInfo targetMethod = AccessTools.Method(typeof(SkillsManager), "IncrementPointsAndNotify");
			MethodInfo replacementMethod = AccessTools.Method(typeof(ExploitableCookingSkillFix), "CheckFoodItem");

			CodeInstruction[] replacementOpCodes = new CodeInstruction[] {
				new CodeInstruction(OpCodes.Ldarg_0), // Put "this" on the stack
				new CodeInstruction(OpCodes.Call, replacementMethod) // Call CheckFoodItem
			};

			foreach (CodeInstruction instruction in instructions) {
				if (instruction.opcode == OpCodes.Callvirt && (MethodInfo) instruction.operand == targetMethod) {
					result.AddRange(replacementOpCodes);
				} else {
					result.Add(instruction);
				}
			}

			return result;
		}

		private static void CheckFoodItem(SkillsManager skillsManager, SkillType skillType, int numPoints,
		                                  SkillsManager.PointAssignmentMode mode, CookingPotItem pot) {

			GearItem itemBeingCooked = Traverse.Create(pot).Field("m_GearItemBeingCooked").GetValue<GearItem>();
			if (itemBeingCooked && itemBeingCooked.IsWornOut()) {
				return; // No skill points for cooking ruined items
			} else if (itemBeingCooked && itemBeingCooked.m_FoodItem) {
				FoodItem food = itemBeingCooked.m_FoodItem;
				if (food.m_IsMeat && food.m_IsRawMeat && food.m_CaloriesRemaining < MIN_SIZE * food.m_CaloriesTotal) {
					return; // No skill points if the piece of meat being cooked is too small
				}
			}

			skillsManager.IncrementPointsAndNotify(skillType, numPoints, mode);
		}
	}
}
